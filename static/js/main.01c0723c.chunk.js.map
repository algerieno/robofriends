{"version":3,"sources":["logo.svg","card.js","cardList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","name","slogan","id","className","alt","src","title","CardList","robots","map","robot","first_name","key","App","searchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","console","log","filteredRobots","this","filter","toLowerCase","includes","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,iJCgB5BC,G,kBAbF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,GACzB,OACI,6BAASC,UAAU,sEACf,yBAAKA,UAAU,MACX,yBAAKC,IAAI,QAAQC,IAAG,oCAA+BH,GAAMC,UAAU,mBAAmBG,MAAM,oCAC5F,wBAAIH,UAAU,MAAMH,GACpB,wBAAIG,UAAU,4BAElB,uBAAGA,UAAU,sCAAsCF,MCChDM,EATE,SAAC,GACd,OAD2B,EAAZC,OAEJC,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAAMV,KAAQU,EAAMC,WACdV,OAAUS,EAAMT,OAChBW,IAAOF,EAAMR,GACbA,GAAMQ,EAAMR,SCyC/BW,E,kDAvCb,aAAe,IAAD,8BACZ,gBAaJC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbvC,EAAKC,MAAQ,CACXZ,OAAQ,GACRS,YAAc,IAJJ,E,gEAQK,IAAD,OAClBI,MAAM,wDACHC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAK,OAAIC,QAAQC,IAAI,EAAKX,SAAS,CAACR,OAAOiB,U,+BAQzC,IAAD,OACDG,EAAiBC,KAAKT,MAAMZ,OAAOsB,QAAO,SAAApB,GAC9C,OAAOA,EAAMC,WAAWoB,cAAcC,SAAS,EAAKZ,MAAMH,YAAYc,kBAGxE,OACE,yBAAK5B,UAAU,MACb,2CACA,2BAAO8B,KAAK,OACLC,YAAY,SACZ/B,UAAU,iEACVgC,SAAUN,KAAKf,eACtB,6BACA,kBAAC,EAAD,CAAUN,OAAUoB,S,GAlCVQ,a,MCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,EAAD,MACDC,SAASC,eAAe,SDyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.01c0723c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './card.css'\n\nconst Card = ({name, slogan, id}) => {\n    return (\n        <article className=\"w5 mw5 br3 dib pa3 pa4-ns ma3 grow ba b--black-10 bg-lightest-blue\">\n            <div className=\"tc\">\n                <img alt=\"robot\" src={`https://robohash.org/robot${id}`} className=\"br-100 h3 w3 dib\" title=\"Photo of a kitty staring at you\" />\n                <h1 className=\"f4\">{name}</h1>\n                <hr className=\"mw3 bb bw1 b--black-10\" />\n            </div>\n            <p className=\"lh-copy measure center f6 black-70\">{slogan}</p>\n        </article>\n    );\n}\n\nexport default Card;","import React from 'react'\nimport Card from './card';\n\nconst CardList = ({robots}) => {\n    return (\n        robots.map(robot => <Card name = {robot.first_name} \n                                  slogan = {robot.slogan} \n                                  key = {robot.id}\n                                  id = {robot.id}></Card>)\n    );\n}\n\nexport default CardList;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CardList from './cardList';\nimport {robots} from './bank'\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield : ''\n    }\n  }\n\ncomponentDidMount() {\n  fetch('https://my.api.mockaroo.com/robots.json?key=e5e19180')\n    .then(response => {return response.json()})\n    .then(users => console.log(this.setState({robots:users})))\n}\n\nsearchChange = (event) => {\n  this.setState({searchfield: event.target.value})\n  \n}\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.first_name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n\n    return (  \n      <div className=\"tc\">\n        <h1>RoboFriends</h1>\n        <input type=\"text\" \n               placeholder=\"search\"  \n               className=\"mb3 bg-light-blue w5 h2 pa3 b--solid b--blue bw1 br2 outline-0\"\n               onChange={this.searchChange}/>\n        <hr/>\n        <CardList robots = {filteredRobots} ></CardList>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport Tachyons from 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App/>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}